#!/usr/bin/guile \
-e main -s
!#

(use-modules (ice-9 regex))

(define level-pattern-list
  '((pingus-level head levelname)
    (pingus-level head description)))

(define worldmap-pattern-list
  '((pingus-worldmap head name)
    (pingus-worldmap head description)
    (pingus-worldmap intro_story title)
    (pingus-worldmap intro_story text)
    (pingus-worldmap intro_story pages page text)
    (pingus-worldmap end_story   title)
    (pingus-worldmap end_story   pages page text)
    ))

(define *current-file* "")

(define (escape-string str)
  (regexp-substitute/global #f "\"" str 'pre "\\\"" 'post))

(define (print-msg sexpr)
  (let ((str  (escape-string (apply string-append sexpr))) )
    (cond ((not (string-null? str))
           (display "#: ")
           (display *current-file*)
           (newline)
           (display "msgid = \"")
           (display str)
           (display "\"\n")
           (display "msgstr = \"\"\n")
           (newline)
           ))))

(define (grep-sexpr func pattern sexpr)
  (cond ((null? pattern)
         (func sexpr))
        (else
         (for-each (lambda (el)
                     (if (equal? (car pattern) (car el))
                         (grep-sexpr func (cdr pattern) (cdr el))))
                   sexpr))))

(define (main args)
  (set! args (cdr args))
  (for-each (lambda (file)
              (set! *current-file* file)
              (let* ((port  (open-input-file file))
                     (sexpr (list (read port))))
                (for-each (lambda (pattern)
                            (grep-sexpr print-msg pattern sexpr))
                          (cond ((string-suffix? ".worldmap" file)
                                 worldmap-pattern-list)
                                ((string-suffix? ".pingus" file)
                                 level-pattern-list)
                                (else
                                 (error "Unknown file suffix\n"))))
                (close-port port)))
            args)
  (display "\n# EOF #\n"))

;; EOF ;;
